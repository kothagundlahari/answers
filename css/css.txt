1) diff between inline, inline-block, block -- display property?
Reference 1:
Url: https://stackoverflow.com/questions/9189810/css-display-inline-vs-inline-block
Inline elements:
respect left & right margins and padding, but not top & bottom
cannot have a width and height set
allow other elements to sit to their left and right.
see very important side notes on this here.

Block elements:
respect all of those
force a line break after the block element


Inline-block elements:
allow other elements to sit to their left and right
respect top & bottom margins and padding
respect height and width
===============================================================================================================================================================

2) display none and visibility hidden differences
Reference 1:
display:none means that the tag in question will not appear on the page at all (although you can still interact with it through the dom).
There will be no space allocated for it between the other tags.

visibility:hidden means that unlike display:none, the tag is not visible, but space is allocated for it on the page. The tag is rendered, it just isn't seen on the
page.

Reference 2:
As far as I understand, when you use visibility: hidden, the element is not visible, but it still occupies space in the layout. When you use display: none, the element
 not only is invisible, but it does not take up any space in the layout.



=======================================================================================================================================================================
3) box model?
Reference 1:
The CSS box model is essentially a box that wraps around every HTML element. It consists of: margins, borders, padding, and the actual content.
Content - The content of the box, where text and images appear
Padding - Clears an area around the content. The padding is transparent
Border - A border that goes around the padding and content
Margin - Clears an area outside the border. The margin is transparent

Reference 2:
The CSS box model is the foundation of layout on the Web — each element is represented as a rectangular box, with the box's content, padding, border, and margin built up around one another like the layers of an onion. As a browser renders a web page layout, it works out what styles are applied to the content of each box, how big the surrounding onion layers are, and where the boxes sit in relation to one another. Before understanding how to create CSS layouts, you need to understand the box model — this is what we'll look at in this article.



========================================================================================================================================================================

4) pseudo classes?
Reference 1:
A pseudo-class is used to define a special state of an element.
For example, it can be used to:
Style an element when a user mouses over it
Style visited and unvisited links differently
Style an element when it gets focus

Reference 2:
A CSS pseudo-class is a keyword added to a selector that specifies a special state of the selected element(s). For example, :hover can be used to apply a style when the user hovers over a button.

Pseudo-classes let you apply a style to an element not only in relation to the content of the document tree, but also in relation to external factors like the history of the navigator (:visited, for example), the status of its content (like :checked on certain form elements), or the position of the mouse (like :hover, which lets you know if the mouse is over an element or not).



==========================================================================================================================================================================

5) flex?
Reference 1:
The flex property specifies the length of the item, relative to the rest of the flexible items inside the same container.The flex property is a shorthand for the flex-grow, flex-shrink, and the flex-basis properties.
Reference 2:
The flex CSS property specifies how a flex item will grow or shrink so as to fit the space available in its flex container.
Reference 3:

==========================================================================================================================================================================
6) media queries
Reference 1:
Media query is a CSS technique introduced in CSS3.
It uses the @media rule to include a block of CSS properties only if a certain condition is true.

Reference 2:
A media query consists of an optional media type and zero or more expressions that limit the style sheets' scope by using media features, such as width, height, and color. Media queries, added in CSS3, let the presentation of content be tailored to a specific range of output devices without having to change the content itself.

@media (min-width: 700px) { ... }
@media (min-width: 700px) and (orientation: landscape) { ... }
@media tv and (min-width: 700px) and (orientation: landscape) { ...  }
==========================================================================================================================================================================
7) position differences static,  relative, absolute and fixed.property
Reference 1:
Reference 2:
Reference 3:
Reference 4:
Reference 5:

==========================================================================================================================================================================
8) css sprites --
Reference 1:
An image sprite is a collection of images put into a single image.
A web page with many images can take a long time to load and generates multiple server requests.
Using image sprites will reduce the number of server requests and save bandwidth.
Reference 2:
image sprites are used in numerous web apps where multiple images are used. Rather than include each image as a separate image file, it is much more memory and bandwidth-friendly to send them as a single image, so the number of HTTP requests is reduced.
Reference 3:


Reference 4:
Reference 5:

==========================================================================================================================================================================

9) all css selectors?
10) float ?
Reference 1:
The float property specifies whether or not an element should float.
The clear property is used to control the behavior of floating elements.
Reference 2:
The float CSS property specifies that an element should be placed along the left or right side of its container, where text and inline elements will wrap around it. Then the element is taken from the normal flow of the web page, though still remaining a part of the flow, contrary to absolute positioning.
Reference 3:
Reference 4:
Reference 5:

==========================================================================================================================================================================
11) box sizing
Reference 1:
The box-sizing property is used to tell the browser what the sizing properties (width and height) should include.
Should they include the border-box? Or just the content-box (which is the default value of the width and height properties)?
Reference 2:
width + padding + border = actual width of an element
height + padding + border = actual height of an element
Reference 3:
Reference 4:
Reference 5:

==========================================================================================================================================================================
12) css animations
Reference 1:
CSS3 animations allows animation of most HTML elements without using JavaScript or Flash!
An animation lets an element gradually change from one style to another.
You can change as many CSS properties you want, as many times you want.
To use CSS3 animation, you must first specify some keyframes for the animation.
@keyframes example {
    from {background-color: red;}
    to {background-color: yellow;}
}
Reference 2:
/* Safari 4.0 - 8.0 */
#div1 {-webkit-animation-timing-function: linear;}
#div2 {-webkit-animation-timing-function: ease;}
#div3 {-webkit-animation-timing-function: ease-in;}
#div4 {-webkit-animation-timing-function: ease-out;}
#div5 {-webkit-animation-timing-function: ease-in-out;}

/* Standard syntax */
#div1 {animation-timing-function: linear;}
#div2 {animation-timing-function: ease;}
#div3 {animation-timing-function: ease-in;}
#div4 {animation-timing-function: ease-out;}
#div5 {animation-timing-function: ease-in-out;}

==========================================================================================================================================================================
13) css gradients
Reference 1:
CSS3 gradients let you display smooth transitions between two or more specified colors.
Earlier, you had to use images for these effects. However, by using CSS3 gradients you can reduce download time and bandwidth usage. In addition, elements with gradients look better when zoomed, because the gradient is generated by the browser.
CSS3 defines two types of gradients:
Linear Gradients (goes down/up/left/right/diagonally)
 Radial Gradients (defined by their center)

Reference 2:
   background: linear-gradient(red, orange, yellow, green, blue, indigo, violet);

==========================================================================================================================================================================

14) break points used in media quires in your project?
Reference 1:
Reference 2:
Reference 3:
Reference 4:
Reference 5:

==========================================================================================================================================================================
15) cross browser compatibilty and polyfills used?
16) what is responsive web design?
17) preprocessor?
18) name spaces in css?
19) what is differences border, padding and margin?
20) z-index?
21) font-styles used in project
22) internal, inline and external? what needs to be used
23) what is css specificity?
24) what is !important
25) Responsive Wed Design  and Adaptive web design?
26) how have you used with in your projects of all above properties
27) CSS Shorthand properties
28) grouping in css through selectors?
29) css2 and css3 differences and css3 properties ?
30) overflow porperty in css?
31) what is view port